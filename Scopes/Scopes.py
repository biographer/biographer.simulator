# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Scopes', [dirname(__file__)])
        except ImportError:
            import _Scopes
            return _Scopes
        if fp is not None:
            try:
                _mod = imp.load_module('_Scopes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Scopes = swig_import_helper()
    del swig_import_helper
else:
    import _Scopes
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Scopes.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Scopes.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Scopes.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Scopes.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Scopes.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Scopes.SwigPyIterator_equal(self, *args)
    def copy(self): return _Scopes.SwigPyIterator_copy(self)
    def next(self): return _Scopes.SwigPyIterator_next(self)
    def __next__(self): return _Scopes.SwigPyIterator___next__(self)
    def previous(self): return _Scopes.SwigPyIterator_previous(self)
    def advance(self, *args): return _Scopes.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Scopes.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Scopes.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Scopes.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Scopes.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Scopes.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Scopes.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Scopes.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NetStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetStruct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
NetStruct_swigregister = _Scopes.NetStruct_swigregister
NetStruct_swigregister(NetStruct)

class Net(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Net, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Net, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Scopes.new_Net(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Scopes.delete_Net
    __del__ = lambda self : None;
    def resize(self, *args): return _Scopes.Net_resize(self, *args)
    def numR(self): return _Scopes.Net_numR(self)
    def numC(self): return _Scopes.Net_numC(self)
    def at(self, *args): return _Scopes.Net_at(self, *args)
    def addRea(self, *args): return _Scopes.Net_addRea(self, *args)
    def replaceRea(self, *args): return _Scopes.Net_replaceRea(self, *args)
    def delRea(self, *args): return _Scopes.Net_delRea(self, *args)
    def hasRea(self, *args): return _Scopes.Net_hasRea(self, *args)
    def setMembers(self, *args): return _Scopes.Net_setMembers(self, *args)
    def setChannels(self, *args): return _Scopes.Net_setChannels(self, *args)
    def setName(self, *args): return _Scopes.Net_setName(self, *args)
    def getNeighbors(self, *args): return _Scopes.Net_getNeighbors(self, *args)
    def getMetabolites(self, *args): return _Scopes.Net_getMetabolites(self, *args)
    def succs(self, *args): return _Scopes.Net_succs(self, *args)
    def preds(self, *args): return _Scopes.Net_preds(self, *args)
    def substrates(self, *args): return _Scopes.Net_substrates(self, *args)
    def products(self, *args): return _Scopes.Net_products(self, *args)
    def inhibitors(self, *args): return _Scopes.Net_inhibitors(self, *args)
    def inhibited(self, *args): return _Scopes.Net_inhibited(self, *args)
    def catalysts(self, *args): return _Scopes.Net_catalysts(self, *args)
    def propagators(self, *args): return _Scopes.Net_propagators(self, *args)
    def subs_stoich(self, *args): return _Scopes.Net_subs_stoich(self, *args)
    def prod_stoich(self, *args): return _Scopes.Net_prod_stoich(self, *args)
    def members(self, *args): return _Scopes.Net_members(self, *args)
    def channels(self, *args): return _Scopes.Net_channels(self, *args)
    def name(self, *args): return _Scopes.Net_name(self, *args)
    def rev(self, *args): return _Scopes.Net_rev(self, *args)
    def setSubstrates(self, *args): return _Scopes.Net_setSubstrates(self, *args)
    def setProducts(self, *args): return _Scopes.Net_setProducts(self, *args)
    def setInhibitors(self, *args): return _Scopes.Net_setInhibitors(self, *args)
    def setCatalysts(self, *args): return _Scopes.Net_setCatalysts(self, *args)
    def setInhibited(self, *args): return _Scopes.Net_setInhibited(self, *args)
    def setPropagators(self, *args): return _Scopes.Net_setPropagators(self, *args)
    def enabled(self, *args): return _Scopes.Net_enabled(self, *args)
    def hasFamilies(self): return _Scopes.Net_hasFamilies(self)
    def printToString(self): return _Scopes.Net_printToString(self)
    def _print(self): return _Scopes.Net__print(self)
    def print_matrix(self): return _Scopes.Net_print_matrix(self)
    __swig_setmethods__["reaMask"] = _Scopes.Net_reaMask_set
    __swig_getmethods__["reaMask"] = _Scopes.Net_reaMask_get
    if _newclass:reaMask = _swig_property(_Scopes.Net_reaMask_get, _Scopes.Net_reaMask_set)
Net_swigregister = _Scopes.Net_swigregister
Net_swigregister(Net)

class Channels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channels, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Scopes.new_Channels(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Scopes.delete_Channels
    __del__ = lambda self : None;
    def clear(self): return _Scopes.Channels_clear(self)
Channels_swigregister = _Scopes.Channels_swigregister
Channels_swigregister(Channels)
cvar = _Scopes.cvar
COL_RESET = cvar.COL_RESET
COL_RED = cvar.COL_RED
COL_GREEN = cvar.COL_GREEN
COL_GREY = cvar.COL_GREY
COL_BOLD = cvar.COL_BOLD

class StateList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Scopes.delete_StateList
    __del__ = lambda self : None;
    def last(self): return _Scopes.StateList_last(self)
    __swig_setmethods__["cyclic"] = _Scopes.StateList_cyclic_set
    __swig_getmethods__["cyclic"] = _Scopes.StateList_cyclic_get
    if _newclass:cyclic = _swig_property(_Scopes.StateList_cyclic_get, _Scopes.StateList_cyclic_set)
    __swig_setmethods__["cyclelen"] = _Scopes.StateList_cyclelen_set
    __swig_getmethods__["cyclelen"] = _Scopes.StateList_cyclelen_get
    if _newclass:cyclelen = _swig_property(_Scopes.StateList_cyclelen_get, _Scopes.StateList_cyclelen_set)
    def __init__(self): 
        this = _Scopes.new_StateList()
        try: self.this.append(this)
        except: self.this = this
StateList_swigregister = _Scopes.StateList_swigregister
StateList_swigregister(StateList)


def scope(*args):
  return _Scopes.scope(*args)
scope = _Scopes.scope

def importSBML(*args):
  return _Scopes.importSBML(*args)
importSBML = _Scopes.importSBML

def importInhibition(*args):
  return _Scopes.importInhibition(*args)
importInhibition = _Scopes.importInhibition

def importMembers(*args):
  return _Scopes.importMembers(*args)
importMembers = _Scopes.importMembers

def importChannels(*args):
  return _Scopes.importChannels(*args)
importChannels = _Scopes.importChannels
class nodemap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nodemap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nodemap, name)
    __repr__ = _swig_repr
    def iterator(self): return _Scopes.nodemap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Scopes.nodemap___nonzero__(self)
    def __bool__(self): return _Scopes.nodemap___bool__(self)
    def __len__(self): return _Scopes.nodemap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _Scopes.nodemap___getitem__(self, *args)
    def __delitem__(self, *args): return _Scopes.nodemap___delitem__(self, *args)
    def has_key(self, *args): return _Scopes.nodemap_has_key(self, *args)
    def keys(self): return _Scopes.nodemap_keys(self)
    def values(self): return _Scopes.nodemap_values(self)
    def items(self): return _Scopes.nodemap_items(self)
    def __contains__(self, *args): return _Scopes.nodemap___contains__(self, *args)
    def key_iterator(self): return _Scopes.nodemap_key_iterator(self)
    def value_iterator(self): return _Scopes.nodemap_value_iterator(self)
    def __setitem__(self, *args): return _Scopes.nodemap___setitem__(self, *args)
    def asdict(self): return _Scopes.nodemap_asdict(self)
    def __init__(self, *args): 
        this = _Scopes.new_nodemap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _Scopes.nodemap_empty(self)
    def size(self): return _Scopes.nodemap_size(self)
    def clear(self): return _Scopes.nodemap_clear(self)
    def swap(self, *args): return _Scopes.nodemap_swap(self, *args)
    def get_allocator(self): return _Scopes.nodemap_get_allocator(self)
    def begin(self): return _Scopes.nodemap_begin(self)
    def end(self): return _Scopes.nodemap_end(self)
    def rbegin(self): return _Scopes.nodemap_rbegin(self)
    def rend(self): return _Scopes.nodemap_rend(self)
    def count(self, *args): return _Scopes.nodemap_count(self, *args)
    def erase(self, *args): return _Scopes.nodemap_erase(self, *args)
    def find(self, *args): return _Scopes.nodemap_find(self, *args)
    def lower_bound(self, *args): return _Scopes.nodemap_lower_bound(self, *args)
    def upper_bound(self, *args): return _Scopes.nodemap_upper_bound(self, *args)
    __swig_destroy__ = _Scopes.delete_nodemap
    __del__ = lambda self : None;
nodemap_swigregister = _Scopes.nodemap_swigregister
nodemap_swigregister(nodemap)

def dScopeStep(*args):
  return _Scopes.dScopeStep(*args)
dScopeStep = _Scopes.dScopeStep

def dScope(*args):
  return _Scopes.dScope(*args)
dScope = _Scopes.dScope

def dScopeRun(*args):
  return _Scopes.dScopeRun(*args)
dScopeRun = _Scopes.dScopeRun

class VC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Scopes.new_VC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Scopes.delete_VC
    __del__ = lambda self : None;
    def insert(self, *args): return _Scopes.VC_insert(self, *args)
    def erase(self, *args): return _Scopes.VC_erase(self, *args)
    def assign(self, *args): return _Scopes.VC_assign(self, *args)
    def printToString(self): return _Scopes.VC_printToString(self)
    def _print(self): return _Scopes.VC__print(self)
    def copy(self): return _Scopes.VC_copy(self)
    def fill(self, *args): return _Scopes.VC_fill(self, *args)
    def put(self, *args): return _Scopes.VC_put(self, *args)
    def replace(self, *args): return _Scopes.VC_replace(self, *args)
    def selectPut(self, *args): return _Scopes.VC_selectPut(self, *args)
    def selectGet(self, *args): return _Scopes.VC_selectGet(self, *args)
    def crop(self, *args): return _Scopes.VC_crop(self, *args)
    def random(self, *args): return _Scopes.VC_random(self, *args)
    def find(self, *args): return _Scopes.VC_find(self, *args)
    def findNe(self, *args): return _Scopes.VC_findNe(self, *args)
    def at(self, *args): return _Scopes.VC_at(self, *args)
    def max(self): return _Scopes.VC_max(self)
    def min(self): return _Scopes.VC_min(self)
    def which(self): return _Scopes.VC_which(self)
    def whichEq(self, *args): return _Scopes.VC_whichEq(self, *args)
    def whichLt(self, *args): return _Scopes.VC_whichLt(self, *args)
    def whichLe(self, *args): return _Scopes.VC_whichLe(self, *args)
    def whichGt(self, *args): return _Scopes.VC_whichGt(self, *args)
    def whichGe(self, *args): return _Scopes.VC_whichGe(self, *args)
    def nz(self): return _Scopes.VC_nz(self)
VC_swigregister = _Scopes.VC_swigregister
VC_swigregister(VC)

# This file is compatible with both classic and new-style classes.


